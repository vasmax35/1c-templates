
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтчетОбОшибкеАрхив = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ОтчетОбОшибкеАрхив");
	ПодробныйТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПодробныйТекстОшибки");
	МассивНавигационныхСсылок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "МассивНавигационныхСсылок");
	ВызовИзМеню = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВызовБезОшибки");
	
	ВызовБезОшибки = (ВызовИзМеню <> Неопределено);
	
	Если Не ВызовБезОшибки Тогда
		
		Если ОтчетОбОшибкеАрхив = Неопределено
			Или ПодробныйТекстОшибки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если МассивНавигационныхСсылок <> Неопределено И
			МассивНавигационныхСсылок.Количество() Тогда
			ЗначениеСписокНавигационныхСсылок = СтрСоединить(МассивНавигационныхСсылок, Символы.ПС);
		КонецЕсли;
		
	КонецЕсли;
		
	УстановитьВидимостьЭлементовИЗначенияПараметровФормы(ВызовБезОшибки);
	ПолучитьЭлектроннуюПочтуТекущегоПользователя();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВызовБезОшибки Тогда
		ФормированиеДанныхДляОтправкиПриВызовеБезОшибки();
	Иначе
		ОбработкаВходящихДанныхОбОшибке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(КаталогФайлов) Тогда
		УдалитьФайлы(КаталогФайлов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтчетОбОшибкеАрхив) Тогда
		УдалитьФайлы(ОтчетОбОшибкеАрхив);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияПодробныйТекстОшибкиНажатие(Элемент)
	ПоказатьПараметрОтчета(ЗначениеПодробныйТекстОшибки);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСнимокОконПриложенияНажатие(Элемент)
	ПоказатьПараметрОтчета(СкриншотХранилищеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИмяПользователяНажатие(Элемент)
	ПоказатьПараметрОтчета(ЗначениеИмяПользователя);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСведенияОбИспользуемомПриложенииНажатие(Элемент)
	ПоказатьПараметрОтчета(ЗначениеСведенияОбИспользуемомПриложении);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияОКомпьютереНажатие(Элемент)
	ПоказатьПараметрОтчета(ЗначениеИнформацияОКомпьютере);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаНажатие(Элемент)
	ПоказатьПараметрОтчета(ЗначениеСписокНавигационныхСсылок);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПриложитьФайлНажатие(Элемент)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Истина;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файлы'");
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораПриложенныхФайлов", ЭтотОбъект);
		
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещение, ДиалогВыбораФайла);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриложенныеФайлы

&НаКлиенте
Процедура ПриложенныеФайлыПриИзменении(Элемент)
	
	КоличествоПриложенныхФайлов = ПриложенныеФайлы.Количество();
	
	Элементы.ПриложенныеФайлы.Видимость = КоличествоПриложенныхФайлов;
	Элементы.ДекорацияРазмерПриложенныхФайлов.Видимость = КоличествоПриложенныхФайлов;
	
	Если КоличествоПриложенныхФайлов Тогда
		РассчитатьРазмерПриложенныхФайлов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьНаДиск(Команда)
	
	СоздатьТекстовыйДокументСИнформациейОбОшибке();
	ОбработатьСкриншот();
	ПоложитьВАрхивПриложенныеФайлы();
	СформироватьАрхив();

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВТП(Команда)
	
	Если Не ПроверкаЗаполненияПараметровПередОтправкойПисьма() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектроннаяПочтаТехническойПоддержки = ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("АдресЭлектроннойПочтыТехническойПоддержки");
	
	Если Не ЗначениеЗаполнено(ЭлектроннаяПочтаТехническойПоддержки) Тогда
		ТекстСообщения = НСтр("ru = 'В настройках необходимо установить адрес электронной почты технической поддержки.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
		
	МассивВложения = Новый Массив;
	СтруктураПараметровВложения = СформироватьВложениеДляОтправки();
	Если СтруктураПараметровВложения <> Неопределено Тогда
		МассивВложения.Добавить(СтруктураПараметровВложения);
	КонецЕсли;
		
	Отправлено = СформироватьПараметрыПисьмаДляОтправкиВТехПоддержку(ЭлектроннаяПочтаТехническойПоддержки, МассивВложения);
	
	Если СтруктураПараметровВложения <> Неопределено Тогда
		УдалитьИзВременногоХранилища(СтруктураПараметровВложения.АдресВоВременномХранилище);
	КонецЕсли;
	
	ТекстОбОтправкеНачало = ?(Отправлено, НСтр("ru = 'Письмо отправлено'"), НСтр("ru = 'Не удалось отправить письмо'"));
	ТекстОбОтправке = СтрШаблон(НСтр("ru = '%1 на адрес технической поддержки %2.'"), ТекстОбОтправкеНачало, ЭлектроннаяПочтаТехническойПоддержки);
	
	Если Отправлено Тогда
		ТекстОбОтправке = СтрШаблон(НСтр("ru = '%1%2Автор письма ставится в получатели по умолчанию.'"), ТекстОбОтправке, Символы.ПС);
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстОбОтправке);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСообщение(Команда)
	
	Если Не ПроверкаЗаполненияПараметровПередОтправкойПисьма() Тогда
		Возврат;
	КонецЕсли;
	
	МассивВложения = Новый Массив;
	СтруктураПараметровВложения = СформироватьВложениеДляОтправки();
	Если СтруктураПараметровВложения <> Неопределено Тогда
		МассивВложения.Добавить(СтруктураПараметровВложения);
	КонецЕсли;
	
	ПараметрыПисьма = СформироватьПараметрыПисьмаДляОтправкиПользователямСистемы(МассивВложения);
	
	Если ТипЗнч(ПараметрыПисьма) <> Тип("Структура") Тогда
		ТекстСообщения = НСтр("ru = 'Системная учетная запись электронной почты недоступна.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораАдресов", ПараметрыПисьма,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовИЗначенияПараметровФормы(ВызовБезОшибки)
	
	ЗначениеВидимостиИПараметров = Не ВызовБезОшибки;
	
	ВключитьВОтчетИмяПользователя = Истина;
	ВключитьВОтчетСведенияОбИспользуемомПриложении = Истина;
	ВключитьВОтчетИнформациюОКомпьютере = Истина;
	ВключитьВОтчетПодробныйТекстОшибки = ЗначениеВидимостиИПараметров;
	ВключитьВОтчетСнимокОконПриложения = ЗначениеВидимостиИПараметров;
	ВключитьВОтчетСсылку = ЗначениеВидимостиИПараметров;
		
	Элементы.ГруппаПодробныйТекстОшибки.Видимость = ЗначениеВидимостиИПараметров;
	Элементы.ГруппаСнимокОконПриложения.Видимость = ЗначениеВидимостиИПараметров;
	Элементы.ГруппаСсылка.Видимость = ЗначениеВидимостиИПараметров;
	
	Элементы.СохранитьНаДиск.Видимость = ЗначениеВидимостиИПараметров;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВходящихДанныхОбОшибке()
	
	// BSLLS:TempFilesDir-off
	// Удаление файлов осуществляется в процедуре "ПередЗакрытием"
	КаталогФайлов = СтрШаблон("%1%2", КаталогВременныхФайлов(), СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
	// BSLLS:TempFilesDir-on
	
	Попытка
		АрхивСведенийОбОшибке = Новый ЧтениеZipФайла(ОтчетОбОшибкеАрхив);
	    АрхивСведенийОбОшибке.ИзвлечьВсе(КаталогФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Исключение
		СообщениеПользователю = НСтр("ru = 'Не удалось распаковать архив с данными об ошибке.'");
		ПоказатьПредупреждение(, СообщениеПользователю);
		Возврат;
	КонецПопытки;
	
	МассивФайлов = НайтиФайлы(КаталогФайлов, "*.*", Истина);
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		Если СтрСравнить("report", Файл.ИмяБезРасширения) = 0 Тогда
			ОбработкаОсновногоФайлаАрхива(Файл);
		КонецЕсли;
		
		Если СтрСравнить("screenshot", Файл.ИмяБезРасширения) = 0 Тогда
			Скриншот = Новый Картинка(Файл.ПолноеИмя);
			СкриншотХранилищеЗначения = ПоместитьСкриншотВХранилищеЗначений(Скриншот);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоместитьСкриншотВХранилищеЗначений(Скриншот)
	Возврат Новый ХранилищеЗначения(Скриншот);
КонецФункции

&НаКлиенте
Процедура ОбработкаОсновногоФайлаАрхива(Файл)
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.ОткрытьФайл(Файл.ПолноеИмя, "UTF-8");
		Структура = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		СообщениеПользователю = НСтр("ru = 'Не удалось прочитать из архива файл формата .json.'");
		ПоказатьПредупреждение(, СообщениеПользователю);
		Возврат;
	КонецПопытки;

	// Подробный текст ошибки
	ЗначениеПодробныйТекстОшибки = ПодробныйТекстОшибки;
	
	ПолучитьИнформациюИзСтруктурыДанныхОбОшибке(Структура);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьСведенияОбИспользуемомПриложении(СведенияОбИспользуемомПриложении)

	МассивСведенийОПриложении = Новый Массив;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивСведения", МассивСведенийОПриложении);
	СтруктураПараметров.Вставить("СтруктураСведения", СведенияОбИспользуемомПриложении);
	
	ДобавитьСвойствоВМассивСведений("description", НСтр("ru = 'Описание'"), СтруктураПараметров);
	ДобавитьСвойствоВМассивСведений("name", НСтр("ru = 'Имя'"), СтруктураПараметров);
	ДобавитьСвойствоВМассивСведений("version", НСтр("ru = 'Версия'"), СтруктураПараметров);
	ДобавитьСвойствоВМассивСведений("compatibilityMode", НСтр("ru = 'Режим совместимости'"), СтруктураПараметров);
	
    ВключенаВозможностьИзменения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОбИспользуемомПриложении, "changeEnabled");
	Если ВключенаВозможностьИзменения <> Неопределено Тогда
		ТекстЗаголовок = НСтр("ru = 'Включена возможность изменения'");
		ТекстВключенаВозможностьИзменения = ?(ВключенаВозможностьИзменения, НСтр("ru = 'Да'"), НСтр("ru = 'Нет'"));
		ТекстВключенаВозможностьИзменения = СтрШаблон("%1: %2", ТекстЗаголовок, ТекстВключенаВозможностьИзменения);
		МассивСведенийОПриложении.Добавить(ТекстВключенаВозможностьИзменения);
	КонецЕсли;
	
	Возврат МассивСведенийОПриложении;
	
КонецФункции

&НаКлиенте
Функция СобратьИнформациюОКомпьютере(ИнформацияОКомпьютере)

	МассивИнформацииОКомпьютере = Новый Массив;
		
	СистемныеДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОКомпьютере, "systemInfo");
	
	Если СистемныеДанные <> Неопределено Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МассивСведения", МассивИнформацииОКомпьютере);
		СтруктураПараметров.Вставить("СтруктураСведения", СистемныеДанные);
		
		ДобавитьСвойствоВМассивСведений("osVersion", НСтр("ru = 'Операционная система'"), СтруктураПараметров);
		ДобавитьСвойствоВМассивСведений("processor", НСтр("ru = 'Процессор'"), СтруктураПараметров);
		ДобавитьСвойствоВМассивСведений("clientID", НСтр("ru = 'Идентификатор клиента'"), СтруктураПараметров);
		
		ВсегоОперативнойПамяти = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СистемныеДанные, "fullRAM");
		Если ВсегоОперативнойПамяти <> Неопределено Тогда
			ДобавитьВМассивСведенийМегабайты(НСтр("ru = 'Всего оперативной памяти'"), СтруктураПараметров, ВсегоОперативнойПамяти);
		КонецЕсли;
		
		СвободноОперативнойПамяти = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СистемныеДанные, "freeRAM");
		Если СвободноОперативнойПамяти <> Неопределено Тогда
			ДобавитьВМассивСведенийМегабайты(НСтр("ru = 'Свободно оперативной памяти'"), СтруктураПараметров, СвободноОперативнойПамяти);
		КонецЕсли;
				
	КонецЕсли;
		
	Возврат МассивИнформацииОКомпьютере;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВМассивСведенийМегабайты(ЗаголовокБлока, СтруктураПараметров, ОперативнаяПамятьВБайтах)
	
	МассивСведения = СтруктураПараметров.МассивСведения;
	
	КоличествоБайтВОдномМегабайте = 1048576;
	ОперативнаяПамятьВМегабайтах = Цел(ОперативнаяПамятьВБайтах / КоличествоБайтВОдномМегабайте);
	
	ИнформацияБлокаДанных = СтрШаблон("%1: %2MB", ЗаголовокБлока, ОперативнаяПамятьВМегабайтах);
	МассивСведения.Добавить(ИнформацияБлокаДанных);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСвойствоВМассивСведений(ИмяСвойства, ЗаголовокБлока, СтруктураПараметров)
	
	МассивСведения = СтруктураПараметров.МассивСведения;
	СтруктураСведения = СтруктураПараметров.СтруктураСведения;

	СвойствоЗначение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСведения, ИмяСвойства);
	Если СвойствоЗначение <> Неопределено Тогда
		ИнформацияБлокаДанных = СтрШаблон("%1: %2", ЗаголовокБлока, СвойствоЗначение);
		МассивСведения.Добавить(ИнформацияБлокаДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПараметрОтчета(ЗначениеПоказать)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначениеПоказать", ЗначениеПоказать);
	ОткрытьФорму("ОбщаяФорма.ФормаОтображенияПараметраОтчетаОбОшибке", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПриложенныхФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Для Каждого ПутьКФайлу Из Результат Цикл
			
			УжеПрисоединенныйФайл = ПриложенныеФайлы.НайтиПоЗначению(ПутьКФайлу);
			Если УжеПрисоединенныйФайл <> Неопределено Тогда
			    Продолжить;
			КонецЕсли;
			
			ПриложенныеФайлы.Добавить(ПутьКФайлу);
			
		КонецЦикла;
		
		Элементы.ПриложенныеФайлы.Видимость = Истина;
		РассчитатьРазмерПриложенныхФайлов();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРазмерПриложенныхФайлов()
	
	КоличествоБайтВОдномМегабайте = 1048576;
	РазмерВсехПриложенныхФайлов = 0;
	
	Для Каждого ПутьКФайлу Из ПриложенныеФайлы Цикл
		Файл = Новый Файл(ПутьКФайлу);
		РазмерФайлаВБайтах = Файл.Размер();
		РазмерФайлаВМегабайтах = РазмерФайлаВБайтах / КоличествоБайтВОдномМегабайте; 
		РазмерВсехПриложенныхФайлов = РазмерВсехПриложенныхФайлов + РазмерФайлаВМегабайтах;
	КонецЦикла;
	
	Элементы.ДекорацияРазмерПриложенныхФайлов.Видимость = (РазмерВсехПриложенныхФайлов <> 0);
	РазмерВсехПриложенныхФайловЦелое = Цел(РазмерВсехПриложенныхФайлов);
	
	Если РазмерВсехПриложенныхФайловЦелое = 0 Тогда
		РазмерВсехПриложенныхФайловЦелое = Окр(РазмерВсехПриложенныхФайлов, 3);
	КонецЕсли;
	
	Элементы.ДекорацияРазмерПриложенныхФайлов.Заголовок = СтрШаблон(НСтр("ru = 'Размер файлов: %1MB'"), РазмерВсехПриложенныхФайловЦелое);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТекстовыйДокументСИнформациейОбОшибке()

	Попытка
	
		ТекстовыйФайл = Новый ТекстовыйДокумент;
		
		Если ЗначениеЗаполнено(СообщениеВТП) Тогда
			ЗаголовокБлока = НСтр("ru = 'Информация об ошибке:'");
			ЗаписатьДанныеВОтчет(Истина, ЗаголовокБлока, СообщениеВТП, ТекстовыйФайл);
		КонецЕсли;
		
		ЗаголовокБлока = НСтр("ru = 'Подробный текст ошибки:'");
		ЗаписатьДанныеВОтчет(ВключитьВОтчетПодробныйТекстОшибки, ЗаголовокБлока, ЗначениеПодробныйТекстОшибки, ТекстовыйФайл);
		
		ЗаголовокБлока = НСтр("ru = 'Имя пользователя:'");
		ЗаписатьДанныеВОтчет(ВключитьВОтчетИмяПользователя, ЗаголовокБлока, ЗначениеИмяПользователя, ТекстовыйФайл);
		
		ЗаголовокБлока = НСтр("ru = 'Сведения об используемом приложении:'");
		ЗаписатьДанныеВОтчет(ВключитьВОтчетСведенияОбИспользуемомПриложении, ЗаголовокБлока, ЗначениеСведенияОбИспользуемомПриложении, ТекстовыйФайл);
		
		ЗаголовокБлока = НСтр("ru = 'Информация о компьютере:'");
		ЗаписатьДанныеВОтчет(ВключитьВОтчетИнформациюОКомпьютере, ЗаголовокБлока, ЗначениеИнформацияОКомпьютере, ТекстовыйФайл);
		
		ЗаголовокБлока = НСтр("ru = 'Навигационные ссылки:'");
		ЗаписатьДанныеВОтчет(ВключитьВОтчетСсылку, ЗаголовокБлока, ЗначениеСписокНавигационныхСсылок, ТекстовыйФайл);
		
		ПутьДляСохраненияОтчета = СтрШаблон("%1\%2.txt", КаталогФайлов, НСтр("ru = 'Отчет об ошибке'"));
		ТекстовыйФайл.Записать(ПутьДляСохраненияОтчета, КодировкаТекста.UTF8, Символы.ПС);
		
	Исключение
		
		СообщениеПользователю = НСтр("ru = 'Ошибка при заполнении отчета формата .txt!'");
		ПоказатьПредупреждение(, СообщениеПользователю);
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеВОтчет(ПометкаНаДобавлениеБлокаВОтчет, ЗаголовокБлока, ТекстоваяИнформация, ТекстовыйФайл)
	
	Если ПометкаНаДобавлениеБлокаВОтчет Тогда
		БлокВТекстовыйФайл = СтрШаблон("%1%2%3", ЗаголовокБлока, Символы.ПС, ТекстоваяИнформация);
		ТекстовыйФайл.ДобавитьСтроку(БлокВТекстовыйФайл);
		ТекстовыйФайл.ДобавитьСтроку("");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСкриншот()
	
	Попытка
		Если Не ВключитьВОтчетСнимокОконПриложения Тогда
			УдалитьФайлы(КаталогФайлов, "screenshot.png");
		КонецЕсли;
	Исключение
		СообщениеПользователю = НСтр("ru = 'Ошибка при обработке скриншота окон приложения.'");
		ПоказатьПредупреждение(, СообщениеПользователю);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложитьВАрхивПриложенныеФайлы()
	
	Попытка
		
		Для Каждого ФайлСтрока Из ПриложенныеФайлы Цикл
			
			Файл = Новый Файл(ФайлСтрока);
			
			Если Не Файл.Существует() Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяФайлаПриемника = СтрШаблон("%1\%2", КаталогФайлов, Файл.Имя);
			КопироватьФайл(ФайлСтрока, ИмяФайлаПриемника);
			
		КонецЦикла;
		
	Исключение
		
		СообщениеПользователю = НСтр("ru = 'Ошибка при копировании в архив приложенных файлов.'");
		ПоказатьПредупреждение(, СообщениеПользователю);
		Возврат;
				
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьАрхив()
	
	ПараметрыДиалога = Новый Структура;
	ЗаголовокОкна = НСтр("ru = 'Выберите каталог для сохранения архива'");
	ПараметрыДиалога.Вставить("Заголовок", ЗаголовокОкна);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораКаталогаДляСохраненияАрхива", ЭтотОбъект);
	ОбменДаннымиКлиент.ОбработчикВыбораФайловогоКаталога(ЭтотОбъект, "КаталогДляСохраненияАрхива",, ПараметрыДиалога, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКаталогаДляСохраненияАрхива(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(КаталогДляСохраненияАрхива) Тогда
		
		ПутьАрхиваДляСохранения = СформироватьНазваниеАрхива(КаталогДляСохраненияАрхива);
		
		Попытка
			ЗаписьZIP = Новый ЗаписьZipФайла(ПутьАрхиваДляСохранения);
			МаскаПереносаФайловВАрхив = СтрШаблон("%1\*.*", КаталогФайлов);
			ЗаписьZIP.Добавить(МаскаПереносаФайловВАрхив);
			ЗаписьZIP.Записать();
		Исключение
			СообщениеПользователю = НСтр("ru = 'Ошибка при создании архива с данными об ошибке.'");
			ПоказатьПредупреждение(, СообщениеПользователю);
			Возврат;
		КонецПопытки;
		
		СообщениеПользователю = СтрШаблон(НСтр("ru = 'Архив ""%1"" успешно сохранен.'"), ПутьАрхиваДляСохранения);
		ПоказатьПредупреждение(, СообщениеПользователю);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьНазваниеАрхива(КаталогДляСохраненияАрхива)

	ДатаДляНазваниеАрхива = ТекущаяДатаСеанса();
	
	День = День(ДатаДляНазваниеАрхива);
	Месяц = Месяц(ДатаДляНазваниеАрхива);
	Год = Формат(ДатаДляНазваниеАрхива, "ДФ = гггг");
	Час = Час(ДатаДляНазваниеАрхива);
	Минута = Минута(ДатаДляНазваниеАрхива);
	Секунда = Секунда(ДатаДляНазваниеАрхива);
	
	Возврат СтрШаблон("%1\Ошибка_%2_%3_%4_%5_%6_%7.zip",
		КаталогДляСохраненияАрхива, День, Месяц, Год, Час, Минута, Секунда);
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыПисьмаДляОтправкиВТехПоддержку(АдресТехническойПоддержки, МассивВложения)
	
	АдресОтправителя = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты");
	СистемнаяУЗДоступна = РаботаСПочтовымиСообщениями.ПроверитьСистемнаяУчетнаяЗаписьДоступна();
	
	Если Не СистемнаяУЗДоступна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТемаПисьма = СформироватьТемуПисьма(ФункциональныйБлок, Тема);
	
	ПараметрыПисьма = Новый Структура;
	
	Если ЗначениеЗаполнено(ЭлектроннаяПочтаТекущегоПользователя) Тогда
		МассивПолучателей = Новый Массив;
		МассивПолучателей.Добавить(ЭлектроннаяПочтаТекущегоПользователя);
		МассивПолучателей.Добавить(АдресТехническойПоддержки);
		СтрокаПолучателей = СтрСоединить(МассивПолучателей, ";");
		ПараметрыПисьма.Вставить("Кому", СтрокаПолучателей);
	Иначе
		ПараметрыПисьма.Вставить("Кому", АдресТехническойПоддержки);
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	ПараметрыПисьма.Вставить("Тело", СообщениеВТП);
	
	Если МассивВложения.Количество() Тогда
		ПараметрыПисьма.Вставить("Вложения", МассивВложения);
	КонецЕсли;
	
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(АдресОтправителя, ПараметрыПисьма);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СформироватьВложениеДляОтправки()
	
	Если ЗначениеЗаполнено(КаталогФайлов) Тогда
		УдалитьФайлы(КаталогФайлов);
	КонецЕсли;
	
	// BSLLS:TempFilesDir-off
	// Удаление файлов осуществляется в процедуре "ПередЗакрытием"	
	КаталогФайлов = СтрШаблон("%1%2", КаталогВременныхФайлов(), СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
	// BSLLS:TempFilesDir-on
	
	Если Не ВызовБезОшибки Тогда
		Попытка
			АрхивСведенийОбОшибке = Новый ЧтениеZipФайла(ОтчетОбОшибкеАрхив);
		    АрхивСведенийОбОшибке.ИзвлечьВсе(КаталогФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Исключение
			СообщениеПользователю = НСтр("ru = 'Не удалось распаковать архив с данными об ошибке!'");
			ПоказатьПредупреждение(, СообщениеПользователю);
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		КаталогНаДиске = Новый Файл(КаталогФайлов);
		Если Не КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(КаталогФайлов);
		КонецЕсли;
	КонецЕсли;
	
	СоздатьТекстовыйДокументСИнформациейОбОшибке();
	ОбработатьСкриншот();
	ПоложитьВАрхивПриложенныеФайлы();
	ПутьАрхиваДляСохранения = СформироватьНазваниеАрхива(КаталогФайлов);
		
	Попытка
		ЗаписьZIP = Новый ЗаписьZipФайла(ПутьАрхиваДляСохранения);
		МаскаПереносаФайловВАрхив = СтрШаблон("%1\*.*", КаталогФайлов);
		ЗаписьZIP.Добавить(МаскаПереносаФайловВАрхив);
		ЗаписьZIP.Записать();
	Исключение
		СообщениеПользователю = НСтр("ru = 'Ошибка при создании архива с данными об ошибке!'");
		ПоказатьПредупреждение(, СообщениеПользователю);
		Возврат Неопределено;
	КонецПопытки;
	
    ФайлАрхивДляОтправки = Новый Файл(ПутьАрхиваДляСохранения);
    Если ФайлАрхивДляОтправки.Существует() Тогда
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Представление", ФайлАрхивДляОтправки.Имя);
		
		АрхивВДвоичномВиде = Новый ДвоичныеДанные(ПутьАрхиваДляСохранения);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(АрхивВДвоичномВиде, Новый УникальныйИдентификатор);
		
		СтруктураВозврата.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		
		Возврат СтруктураВозврата;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция ПроверкаЗаполненияПараметровПередОтправкойПисьма()
	
	Если Не ЗначениеЗаполнено(ФункциональныйБлок) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Блок"" обязательно к заполнению.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Тема) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Тема"" обязательно к заполнению.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыПисьмаДляОтправкиПользователямСистемы(МассивВложения)

	АдресОтправителя = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты");
	СистемнаяУЗДоступна = РаботаСПочтовымиСообщениями.ПроверитьСистемнаяУчетнаяЗаписьДоступна();
	
	Если Не СистемнаяУЗДоступна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТемаПисьма = СформироватьТемуПисьма(ФункциональныйБлок, Тема);
		
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	ПараметрыПисьма.Вставить("Тело", СообщениеВТП);
	ПараметрыПисьма.Вставить("АдресОтправителя", АдресОтправителя);
	ПараметрыПисьма.Вставить("ЭлектроннаяПочтаТекущегоПользователя", ЭлектроннаяПочтаТекущегоПользователя);
	
	Если МассивВложения.Количество() Тогда
		ПараметрыПисьма.Вставить("Вложения", МассивВложения);
	КонецЕсли;
	
	Возврат ПараметрыПисьма;

КонецФункции

&НаСервереБезКонтекста
Функция СформироватьТемуПисьма(ФункциональныйБлок, Тема)
	Возврат СтрШаблон(НСтр("ru = 'ПОДСИСТЕМА_%1_%2'"), ФункциональныйБлок, Тема);
КонецФункции

&НаСервере
Процедура ПолучитьЭлектроннуюПочтуТекущегоПользователя()

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПользователиКонтактнаяИнформация.АдресЭП КАК АдресЭП
	               |ИЗ
	               |	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	               |ГДЕ
	               |	ПользователиКонтактнаяИнформация.Ссылка = &ТекущийПользователь
	               |	И ПользователиКонтактнаяИнформация.Вид = &EmailПользователя";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("EmailПользователя", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя"));
	
	Результат = Запрос.Выполнить();
	
	ЭлектроннаяПочтаТекущегоПользователя = "";
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЭлектроннаяПочтаТекущегоПользователя = Выборка.АдресЭП;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДанныхДляОтправкиПриВызовеБезОшибки()
	
	ОтчетОбОшибке = Новый ОтчетОбОшибке(ИнформацияОбОшибке());
	СтрокаJSON = ОтчетОбОшибке.ДанныеОтчета;
	СтруктураДанных = ПолучитьСтруктуруИзСтрокиJSONНаСервере(СтрокаJSON);
	
	ПолучитьИнформациюИзСтруктурыДанныхОбОшибке(СтруктураДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруИзСтрокиJSONНаСервере(СтрокаJSON)
	Возврат РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(СтрокаJSON);
КонецФункции

&НаКлиенте
Процедура ПолучитьИнформациюИзСтруктурыДанныхОбОшибке(Структура)
	
	// Имя пользователя
	ИнформацияОПользовательскойСессии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура, "sessionInfo");
	Если ИнформацияОПользовательскойСессии <> Неопределено Тогда
		ЗначениеИмяПользователя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИнформацияОПользовательскойСессии, "userName");
	КонецЕсли;
	
	// Сведения об используемом приложении
	СведенияОбИспользуемомПриложении = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура, "configInfo");
	Если СведенияОбИспользуемомПриложении <> Неопределено Тогда
		МассивСведенийОбИспользуемомПриложении = СобратьСведенияОбИспользуемомПриложении(СведенияОбИспользуемомПриложении);
		ЗначениеСведенияОбИспользуемомПриложении = СтрСоединить(МассивСведенийОбИспользуемомПриложении, Символы.ПС);
	КонецЕсли;
	
	// Информация о компьютере
	ИнформацияОКомпьютере = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Структура, "clientInfo");
	Если ИнформацияОКомпьютере <> Неопределено Тогда
		МассивИнформацииОКомпьютере = СобратьИнформациюОКомпьютере(ИнформацияОКомпьютере);
		ЗначениеИнформацияОКомпьютере = СтрСоединить(МассивИнформацииОКомпьютере, Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
