
#Область СлужебныйПрограммныйИнтерфейс

// Сворачивает или разворачивает дерево на форме (включая все дочерние элементы).
//
// Параметры:
//  Элемент - ПолеФормы - элемент формы 
//  Дерево - ДеревоЗначений - исходное дерево элемента формы.
//  Развернуть - Булево - развернуть (истина) или свернуть (ложь).
Процедура СвернутьРазвернутьДерево(Элемент, Дерево, Знач Развернуть) Экспорт
    
    Для Каждого ЭлементКоллекции Из Дерево Цикл
        ВложенныеЭлементыКоллекции = ЭлементКоллекции.ПолучитьЭлементы();
        Если ВложенныеЭлементыКоллекции.Количество() > 0 Тогда
            СвернутьРазвернутьДерево(Элемент, ВложенныеЭлементыКоллекции, Развернуть);

            Если Развернуть = Истина Тогда
                Элемент.Развернуть(ЭлементКоллекции.ПолучитьИдентификатор());
            Иначе
                Элемент.Свернуть(ЭлементКоллекции.ПолучитьИдентификатор());
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

// Сворачивает или разворачивает дерево на форме (включая все дочерние элементы).
//
// Параметры:
//  СписокВыбранныхЭлементов - СписокЗначений - Список выбранных элементов 
//  ИмяПоля - Строка - Имя поля в элементе дерева для получения значения, которое добавляется в СписокВыбранныхЭлементов  
//  ЭлементыДерева - ДанныеФормыЭлементДерева, ДанныеФормыКоллекцияЭлементовДерева - исходное дерево элемента формы.
//  Пометка - Булево - развернуть (истина) или свернуть (ложь).
Процедура ИзменитьПометкуВДереве(СписокВыбранныхЭлементов, ИмяПоля, ЭлементыДерева, Знач Пометка) Экспорт
    
    КоллекцияЭлементовДерева = Неопределено;
    
    Если Тип(ЭлементыДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		ЭлементыДерева.Пометка = Пометка;

		ЭлементСпискаЗначений = СписокВыбранныхЭлементов.НайтиПоЗначению(ЭлементыДерева[ИмяПоля]);
		
		Если НЕ Пометка И НЕ ЭлементСпискаЗначений = Неопределено Тогда
			СписокВыбранныхЭлементов.Удалить(ЭлементСпискаЗначений);
		ИначеЕсли Пометка И ЭлементСпискаЗначений = Неопределено Тогда
			СписокВыбранныхЭлементов.Добавить(ЭлементыДерева[ИмяПоля]);
		КонецЕсли;
		
		КоллекцияЭлементовДерева = ЭлементыДерева.ПолучитьЭлементы();
		
    ИначеЕсли Тип(ЭлементыДерева) = Тип("ДанныеФормыКоллекцияЭлементовДерева") Тогда
		КоллекцияЭлементовДерева = ЭлементыДерева;
		
	КонецЕсли;
    
    Если НЕ КоллекцияЭлементовДерева = Неопределено Тогда
	    Для Каждого ЭлементКоллекции Из КоллекцияЭлементовДерева Цикл
	        ВложенныеЭлементыКоллекции = ЭлементКоллекции.ПолучитьЭлементы();
	        Если ВложенныеЭлементыКоллекции.Количество() > 0 Тогда
	            ИзменитьПометкуВДереве(СписокВыбранныхЭлементов, ИмяПоля, ВложенныеЭлементыКоллекции, Пометка);
	        КонецЕсли;
			ЭлементКоллекции.Пометка = Пометка;

			ЭлементСпискаЗначений = СписокВыбранныхЭлементов.НайтиПоЗначению(ЭлементКоллекции[ИмяПоля]);
		
			Если НЕ Пометка И НЕ ЭлементСпискаЗначений = Неопределено Тогда
				СписокВыбранныхЭлементов.Удалить(ЭлементСпискаЗначений);
			ИначеЕсли Пометка И ЭлементСпискаЗначений = Неопределено Тогда
				СписокВыбранныхЭлементов.Добавить(ЭлементКоллекции[ИмяПоля]);
			КонецЕсли;
			
	    КонецЦикла;
	КонецЕсли;
    
КонецПроцедуры

// Изменить пометку в списке на формые.
// 
// Параметры:
//  СписокВыбранныхЭлементов - СписокЗначений - Список выбранных элементов
//  ВыбранныйЭлемент - ЭлементСпискаЗначений -  Выбранный элемент
//  Пометка - Булево -  Пометка
Процедура ИзменитьПометку(СписокВыбранныхЭлементов, ВыбранныйЭлемент, Пометка) Экспорт
	ЭлементСпискаЗначений = СписокВыбранныхЭлементов.НайтиПоЗначению(ВыбранныйЭлемент);
	
	Если НЕ Пометка И НЕ ЭлементСпискаЗначений = Неопределено Тогда
		СписокВыбранныхЭлементов.Удалить(ЭлементСпискаЗначений);
	ИначеЕсли Пометка И ЭлементСпискаЗначений = Неопределено Тогда
		СписокВыбранныхЭлементов.Добавить(ВыбранныйЭлемент);
	КонецЕсли;
КонецПроцедуры

// Установить свойство элементов формы.
// 
// Параметры:
//  Элементы - СписокЗначений - элементы вормы
//  СписокИменЭлементов - Строка - Список имен элементов через запятую
//  Свойство - Строка - Имя свойства, Например: "Доступность"
//  ЗначениеСсвойства - Произвольный - Значение ссвойства
Процедура УстановитьСвойствоЭлементовФормы(Элементы, СписокИменЭлементов, Свойство, ЗначениеСсвойства) Экспорт

	МассивИменЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокИменЭлементов, ",", Истина, Истина);
	
	Для Каждого ЭлементИмя Из МассивИменЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементИмя, Свойство, ЗначениеСсвойства);
	КонецЦикла;
	
КонецПроцедуры

// Изменить пометку кнопки на формые.
// 
// Параметры:
//  Элементы - СписокЗначений - список или массив элементов формы
//  ИмяКоманды - Строка - Имя команды формы
Процедура ИзменитьПометкуКнопки(Элементы, ИмяКоманды) Экспорт
	
	Элементы[ИмяКоманды].Пометка = Не Элементы[ИмяКоманды].Пометка;
	
КонецПроцедуры

// Восстановить значения текущих таблиц.
// 
// Параметры:
//  Форма - Форма - Форма значения таблиц которой нужно возвратить.
Процедура ВосстановитьЗначенияТекущихТаблиц(Форма) Экспорт
	МассивИдентификаторов = Новый Массив;
	Для Каждого ТаблицыСтруктура Из Форма.ЗначенияТекущихТаблиц Цикл
		ТекущаяТаблицаКлюч = ТаблицыСтруктура.Ключ;
		ВыделенныеСтроки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ТаблицыСтруктура.Значение.ДанныеТаблицы, Ложь);
		ИмяРеквизита = ТаблицыСтруктура.Значение.ИмяРеквизита;
		Если ТипЗнч(Форма[ТекущаяТаблицаКлюч]) = Тип("ДанныеФормыКоллекция") Тогда
			МассивИдентификаторов = ПолучитьИдентификаторыПоМассивуЗначений(Форма,
																			ТекущаяТаблицаКлюч,
																			ИмяРеквизита,
																			ВыделенныеСтроки);
		ИначеЕсли ТипЗнч(Форма[ТекущаяТаблицаКлюч]) = Тип("ДанныеФормыДерево") Тогда
			ДеревоЗначений = Форма[ТекущаяТаблицаКлюч];
			КоллекцияЭлементовДерева = ДеревоЗначений.ПолучитьЭлементы();
			ИдентификаторСтроки = КоллекцияЭлементовДерева[0].ПолучитьИдентификатор();
			Форма.Элементы[ТекущаяТаблицаКлюч].ТекущаяСтрока = ИдентификаторСтроки;
			Форма.Элементы[ТекущаяТаблицаКлюч].Развернуть(ИдентификаторСтроки);
			Для Каждого Текущиеданные Из ВыделенныеСтроки Цикл
				НайтиСтрокуДерева(КоллекцияЭлементовДерева, Текущиеданные, ИмяРеквизита, ИдентификаторСтроки, Ложь);
				МассивИдентификаторов.Добавить(ИдентификаторСтроки);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Форма[ТекущаяТаблицаКлюч]) = Тип("ДинамическийСписок") Тогда
			МассивИдентификаторов = ВыделенныеСтроки;
		КонецЕсли;
		Если МассивИдентификаторов.Количество() Тогда
			Форма.Элементы[ТекущаяТаблицаКлюч].ТекущаяСтрока = МассивИдентификаторов[0];
		КонецЕсли;
		Для Каждого ИндексСтроки Из МассивИдентификаторов Цикл
			Форма.Элементы[ТекущаяТаблицаКлюч].ВыделенныеСтроки.Добавить(ИндексСтроки);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИдентификаторыПоМассивуЗначений(Форма, ИмяРеквизитаТаблицы, ИмяРеквизитаСсылки, МассивЗначений) Экспорт
	МассивИдентификаторов = Новый Массив;
	Для Каждого ЭлементСсылка Из МассивЗначений Цикл
		Для Каждого СтрокаТаблицы Из Форма[ИмяРеквизитаТаблицы] Цикл
			Если ЭлементСсылка = СтрокаТаблицы[ИмяРеквизитаСсылки] Тогда
				МассивИдентификаторов.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат МассивИдентификаторов;
КонецФункции

Функция ЗаполнитьМассивЗначенийПоВыделеннымСтрокамТаблиц(Форма,
														 ИмяРеквизитаТаблицы,
														 ИмяРеквизитаСсылки,
														 МассивИдентификаторов) Экспорт
	МассивЗначений = Новый Массив;

	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		Если ТипЗнч(Форма[ИмяРеквизитаТаблицы]) = Тип("ДанныеФормыКоллекция") Тогда
			СтрокаКоллекции = Форма[ИмяРеквизитаТаблицы].НайтиПоИдентификатору(Идентификатор);
			Если СтрокаКоллекции = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивЗначений.Добавить(СтрокаКоллекции[ИмяРеквизитаСсылки]);
		ИначеЕсли ТипЗнч(Форма[ИмяРеквизитаТаблицы]) = Тип("ДинамическийСписок") Тогда
			Если НЕ ТипЗнч(Идентификатор) = Тип("Число") Тогда
				МассивЗначений.Добавить(Идентификатор[ИмяРеквизитаСсылки]);
			Иначе
				МассивЗначений.Добавить(Идентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат МассивЗначений;
КонецФункции

Процедура НайтиСтрокуДерева(КоллекцияЭлементовДерева, ТекущиеДанные, Реквизит, ИдентификаторСтроки, ПрекратитьПоиск)

    Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл
        
        Если ПрекратитьПоиск Тогда
            Возврат;
        КонецЕсли;

        Если СтрокаДерева[Реквизит] = ТекущиеДанные Тогда
            ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
            ПрекратитьПоиск = Истина;
            Возврат;
        КонецЕсли;

        КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();

        Если КоллекцияЭлементов.Количество() > 0 Тогда
            НайтиСтрокуДерева(КоллекцияЭлементов, ТекущиеДанные, Реквизит, ИдентификаторСтроки, ПрекратитьПоиск);
        КонецЕсли;
    
    КонецЦикла;

КонецПроцедуры
#КонецОбласти
